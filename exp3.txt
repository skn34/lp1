# Import required libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import ConfusionMatrixDisplay, accuracy_score, classification_report

# Load the dataset
df = pd.read_csv('../input/graduate-admissions/Admission_Predict_Ver1.1.csv')
df.head()

# Drop unnecessary column "Serial No."
df = df.drop('Serial No.', axis=1)

# Convert "Chance of Admit " column to binary classification (0 or 1)
df['Chance of Admit '] = [1 if each > 0.75 else 0 for each in df['Chance of Admit ']]
df.head()

# Define features and target variable
x = df[['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA', 'Research']]
y = df['Chance of Admit ']

# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=1)
print("Size of splitted data:")
print(f"x_train: {x_train.shape}")
print(f"y_train: {y_train.shape}")
print(f"x_test: {x_test.shape}")
print(f"y_test: {y_test.shape}")

# Initialize and train models
model_dt = DecisionTreeRegressor(random_state=1)
model_rf = RandomForestRegressor(random_state=1)
model_lr = LogisticRegression(random_state=1, solver='lbfgs', max_iter=1000)

model_dt.fit(x_train, y_train)
model_rf.fit(x_train, y_train)
model_lr.fit(x_train, y_train)

# Make predictions
y_pred_dt = model_dt.predict(x_test).astype(int)
y_pred_rf = model_rf.predict(x_test)
y_pred_rf = [1 if each > 0.75 else 0 for each in y_pred_rf]
y_pred_lr = model_lr.predict(x_test)

# Evaluate models and display results

# Decision Tree
print("Decision Tree")
ConfusionMatrixDisplay.from_predictions(y_test, y_pred_dt)
plt.title('Decision Tree')
plt.show()
print(f"Accuracy is {accuracy_score(y_test, y_pred_dt):.3f}")
print(classification_report(y_test, y_pred_dt))

# Logistic Regression
print("Logistic Regression")
ConfusionMatrixDisplay.from_predictions(y_test, y_pred_lr)
plt.title('Logistic Regression')
plt.show()
print(f"Accuracy is {accuracy_score(y_test, y_pred_lr):.3f}")
print(classification_report(y_test, y_pred_lr))

# Random Forest
print("Random Forest")
ConfusionMatrixDisplay.from_predictions(y_test, y_pred_rf, xticks_rotation='vertical')
plt.title('Random Forest')
plt.show()
print(f"Accuracy is {accuracy_score(y_test, y_pred_rf):.3f}")
print(classification_report(y_test, y_pred_rf))
